rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isModerator() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.accountType == 'moderator';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isVerifiedSeller() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/sellers/$(request.auth.uid)).data.verificationStatus == 'approved';
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isModerator() || isOwner(userId);
      allow delete: if isModerator();
    }

    // Sellers collection rules
    match /sellers/{sellerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == sellerId;
      allow update: if isModerator() || isOwner(sellerId);
      allow delete: if isModerator();

      // Ratings subcollection rules
      match /ratings/{ratingId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      }
    }

    // Products collection rules
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow create: if isVerifiedSeller() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow stockEntries updates for any authenticated user
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stockEntries'])) ||
        // Allow full updates for product owner
        (resource.data.sellerId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && resource.data.sellerId == request.auth.uid;
    }

    // Orders collection rules
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        resource.data.customerId == request.auth.uid || 
        resource.data.sellerId == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.productId is string &&
        request.resource.data.sellerId is string &&
        request.resource.data.quantity is number &&
        request.resource.data.totalAmount is number &&
        request.resource.data.productName is string &&
        request.resource.data.productPrice is number &&
        request.resource.data.selectedColor is string &&
        request.resource.data.selectedSize is string;
      allow update: if isAuthenticated() && (
        // Customer can only update status to 'canceled' or 'failed'
        (resource.data.customerId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
         request.resource.data.status in ['canceled', 'failed']) ||
        // Seller can update status to 'accepted', 'rejected', or 'completed'
        (resource.data.sellerId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
         request.resource.data.status in ['accepted', 'rejected', 'completed'])
      );
    }

    // Chats collection rules
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        // Allow read if chat does not exist (for existence check), or user is a participant
        !exists(/databases/$(database)/documents/chats/$(chatId)) ||
        (resource.data.participants != null && request.auth.uid in resource.data.participants)
      );
      allow create: if isAuthenticated() && (
        request.auth.uid in request.resource.data.participants
      );
      allow update: if isAuthenticated() && (
        resource.data.participants != null && request.auth.uid in resource.data.participants
      );
      
      // Messages subcollection rules
      match /messages/{messageId} {
        allow read: if isAuthenticated() && (
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
        );
        allow create: if isAuthenticated() && (
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid
        );
      }
    }
  }
} 